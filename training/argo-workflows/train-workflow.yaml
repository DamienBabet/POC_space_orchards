apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parallel-training-
spec:
  serviceAccountName: workflow
  volumes:
    - name: dshm
      emptyDir:
        medium: Memory
        sizeLimit: 128Gi
  entrypoint: main
  arguments:
    parameters:
      - name: training-conf-list
        value: '[
            { "SOURCE": "SENTINEL2",
              "N_BANDS": "14",
              "DATASETS": ["AT332_2018","BE100_2018","BE251_2018","BG322_2018","CY000_2018","CZ072_2018","DEA54_2018","DK041_2018","EE00A_2018","EL521_2018","ES612_2018","FI1C1_2018","FRJ27_2018","FRK26_2018","HR050_2018","IE061_2018","ITI32_2018","LT028_2018","LU000_2018","LV008_2018","MT001_2018","NL33C_2018","PL414_2018","PT16I_2018","RO123_2018","SI035_2018","SK022_2018","UKJ22_2018","AT332_2021","BE100_2021","BE251_2021","BG322_2021","CY000_2021","CZ072_2021","DEA54_2021","DK041_2021","EE00A_2021","EL521_2021","ES612_2021","FI1C1_2021","FRJ27_2021","FRK26_2021","HR050_2021","IE061_2021","ITI32_2021","LT028_2021","LU000_2021","LV008_2021","MT001_2021","NL33C_2021","PL414_2021","PT16I_2021","RO123_2021","SI035_2021","SK022_2021"],
              "TILES_SIZE": 250,
              "AUGMENT_SIZE": 512,
              "TYPE_LABELER": "CLCplus-Backbone",
              "USE_S3": 0,
              "EPOCHS": 50,
              "BATCH_SIZE": 32,
              "TEST_BATCH_SIZE": 16,
              "LR": 0.00005,
              "BUILDING_CLASS_WEIGHT": 10.0,
              "LOSS_NAME": "cross_entropy_weighted",
              "MODULE_NAME": "segformer-b5",
              "SCHEDULER_NAME": "one_cycle",
              "PATIENCE": 4,
              "LABEL_SMOOTHING": 0.0,
              "LOGITS": 1,
              "FREEZE_ENCODER": 0,
              "CUDA": 1
            }
            ]'

  templates:
    # Entrypoint DAG template
    - name: main
      dag:
        tasks:
          # Task 1: Preprocess images
          - name: run-training-with-params
            template: run-training-wt
            arguments:
              parameters:
                - name: SOURCE
                  value: "{{item.SOURCE}}"
                - name: N_BANDS
                  value: "{{item.N_BANDS}}"
                - name: DATASETS
                  value: "{{item.DATASETS}}"
                - name: TYPE_LABELER
                  value: "{{item.TYPE_LABELER}}"
                - name: TILES_SIZE
                  value: "{{item.TILES_SIZE}}"
                - name: AUGMENT_SIZE
                  value: "{{item.AUGMENT_SIZE}}"
                - name: USE_S3
                  value: "{{item.USE_S3}}"
                - name: EPOCHS
                  value: "{{item.EPOCHS}}"
                - name: BATCH_SIZE
                  value: "{{item.BATCH_SIZE}}"
                - name: TEST_BATCH_SIZE
                  value: "{{item.TEST_BATCH_SIZE}}"
                - name: LR
                  value: "{{item.LR}}"
                - name: BUILDING_CLASS_WEIGHT
                  value: "{{item.BUILDING_CLASS_WEIGHT}}"
                - name: LOSS_NAME
                  value: "{{item.LOSS_NAME}}"
                - name: MODULE_NAME
                  value: "{{item.MODULE_NAME}}"
                - name: SCHEDULER_NAME
                  value: "{{item.SCHEDULER_NAME}}"
                - name: PATIENCE
                  value: "{{item.PATIENCE}}"
                - name: LABEL_SMOOTHING
                  value: "{{item.LABEL_SMOOTHING}}"
                - name: LOGITS
                  value: "{{item.LOGITS}}"
                - name: FREEZE_ENCODER
                  value: "{{item.FREEZE_ENCODER}}"
                - name: CUDA
                  value: "{{item.CUDA}}"
            # Pass the inputs to the task using "withParam"
            withParam: "{{workflow.parameters.training-conf-list}}"

    - name: run-training-wt
      inputs:
        parameters:
          - name: SOURCE
          - name: N_BANDS
          - name: DATASETS
          - name: TYPE_LABELER
          - name: TILES_SIZE
          - name: AUGMENT_SIZE
          - name: USE_S3
          - name: EPOCHS
          - name: BATCH_SIZE
          - name: TEST_BATCH_SIZE
          - name: LR
          - name: BUILDING_CLASS_WEIGHT
          - name: LOSS_NAME
          - name: MODULE_NAME
          - name: SCHEDULER_NAME
          - name: PATIENCE
          - name: LABEL_SMOOTHING
          - name: LOGITS
          - name: FREEZE_ENCODER
          - name: CUDA
      nodeSelector:
        nvidia.com/gpu.product: "NVIDIA-H100-NVL"
      container:
        image: inseefrlab/satellite-images-train:v0.0.7
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            nvidia.com/gpu: 1
        command: ["/bin/bash", -c]
        args:
          - |
            git clone https://github.com/InseeFrLab/hackathon-ntts-2025.git &&
            cd hackathon-ntts-2025/training &&
            export MC_HOST_s3=https://$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY@$AWS_S3_ENDPOINT &&
            mlflow run ~/work/hackathon-ntts-2025/training/ \
                --env-manager=local \
                --entry-point $ENTRY_POINT \
                -P remote_server_uri=$MLFLOW_TRACKING_URI \
                -P experiment_name=$MLFLOW_EXPERIMENT_NAME \
                -P source={{inputs.parameters.SOURCE}} \
                -P n_bands={{inputs.parameters.N_BANDS}} \
                -P datasets='{{inputs.parameters.DATASETS}}' \
                -P type_labeler={{inputs.parameters.TYPE_LABELER}} \
                -P tiles_size={{inputs.parameters.TILES_SIZE}} \
                -P augment_size={{inputs.parameters.AUGMENT_SIZE}} \
                -P epochs={{inputs.parameters.EPOCHS}} \
                -P batch_size={{inputs.parameters.BATCH_SIZE}} \
                -P test_batch_size={{inputs.parameters.TEST_BATCH_SIZE}} \
                -P lr={{inputs.parameters.LR}} \
                -P from_s3={{inputs.parameters.USE_S3}} \
                -P loss_name={{inputs.parameters.LOSS_NAME}} \
                -P module_name={{inputs.parameters.MODULE_NAME}} \
                -P label_smoothing={{inputs.parameters.LABEL_SMOOTHING}} \
                -P scheduler_name={{inputs.parameters.SCHEDULER_NAME}} \
                -P patience={{inputs.parameters.PATIENCE}} \
                -P logits={{inputs.parameters.LOGITS}} \
                -P freeze_encoder={{inputs.parameters.FREEZE_ENCODER}} \
                -P building_class_weight={{inputs.parameters.BUILDING_CLASS_WEIGHT}} \
                -P cuda={{inputs.parameters.CUDA}}
        volumeMounts:
          - mountPath: /dev/shm
            name: dshm
        env:
          # env var for s3 connexion
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: mc-s3
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: mc-s3
                key: secretKey
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: AWS_S3_ENDPOINT
            value: minio.lab.sspcloud.fr
          - name: MLFLOW_S3_ENDPOINT_URL
            value: https://minio.lab.sspcloud.fr
          - name: MLFLOW_TRACKING_URI
            value: https://projet-hackathon-ntts-2025-mlflow.user.lab.sspcloud.fr/
          - name: MLFLOW_EXPERIMENT_NAME
            value: test
          - name: ENTRY_POINT
            value: main
